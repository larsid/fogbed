{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#fogbed","title":"Fogbed","text":"<p>Fogbed is a framework and toolset integration designed for rapid prototyping of fog components in virtualized environments using a desktop approach. It aims to meet the requirements of low cost, flexible setup, and compatibility with real-world technologies. The components are built upon the Mininet network emulator, leveraging Docker container instances as fog virtual nodes.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Ubuntu 20.04 or later</li> <li>Containernet</li> <li>Python 3.8+</li> </ul>"},{"location":"#install","title":"Install","text":""},{"location":"#ubuntu-2004","title":"Ubuntu 20.04","text":"Latest1.1.x <p>Install Fogbed <pre><code>sudo pip install fogbed\n</code></pre> Install Containernet <pre><code>fogbed install \n</code></pre></p> <p>Install Containernet <pre><code>sudo apt-get install ansible\n</code></pre></p> <pre><code>git clone https://github.com/containernet/containernet.git\n</code></pre> <pre><code>sudo ansible-playbook -i \"localhost,\" -c local containernet/ansible/install.yml\n</code></pre> <p>Install Fogbed <pre><code>sudo pip install fogbed\n</code></pre></p>"},{"location":"#ubuntu-2204-or-later","title":"Ubuntu 22.04 or Later","text":"<p>Create and activate a virtual environment: <pre><code>python3 -m venv venv\n</code></pre> <pre><code>source venv/bin/activate\n</code></pre></p> <p>Install Fogbed <pre><code>pip install fogbed\n</code></pre> Install Containernet <pre><code>fogbed install \n</code></pre></p>"},{"location":"config_files/","title":"Using Config Files","text":"<p>Fogbed accepts a <code>topology.yml</code> file to build an <code>Experiment</code>.</p> <p>To create a <code>FogbedExperiment</code>, define the following sections: <code>containers</code>, <code>instances</code>, and <code>links</code>. Furthermore, you have the option to create a single topology by setting the <code>is_distributed</code> section to control when the topology should be distributed across the workers.</p> Example of topology with .yml file: topology.yml<pre><code>is_distributed: false\n\ncontainers:\n  node1:\n    dimage: ubuntu:trusty\n    dcmd: /bin/bash\n    environment:\n      DATA_PATH: /tmp/data\n    ports:\n      - 80: 8000\n    resources: medium\n  node2:\n    dimage: ubuntu:trusty\n  node3:\n    dimage: ubuntu:trusty\n  node4:\n    dimage: ubuntu:trusty\n\ninstances:\n  cloud:\n    model: \n      type: cloud\n      max_cu: 32\n      max_mu: 2048\n    containers: ['node1']\n\n  fog:\n    model: \n      type: fog\n      max_cu: 8\n      max_mu: 512\n    containers: ['node2']\n\n  edge:\n    model: \n      type: edge\n      max_cu: 1\n      max_mu: 128\n    containers: ['node3', 'node4']\n\nlinks:\n  cloud_fog: \n    delay: 10ms\n  fog_edge: \n\nworkers:\n  worker1:\n    ip: hostname1\n    port: 5000\n    reachable: ['cloud']\n    instances: ['cloud']\n\n  worker2:\n    ip: hostname2\n    port: 5000\n    reachable: ['fog']\n    instances: ['fog', 'edge']\n    links:\n      fog_edge:\n\ntunnels: ['worker1_worker2']\n</code></pre> <p>To run that topology use the command: <pre><code>fogbed run topology.yml\n</code></pre></p> <p>Tip</p> <p>If you set <code>is_distributed: true</code> that example will run the experiment using two workers.</p> <p>Make sure the IP addresses and ports are configured according to the experiment script and run a worker in each machine with: <pre><code>fogbed worker -p=5000\n</code></pre></p>"},{"location":"config_files/#using-the-experimentbuilder","title":"Using the ExperimentBuilder","text":"experiment.py<pre><code>from fogbed import ExperimentBuilder\n\nif(__name__=='__main__'):\n    exp = ExperimentBuilder(filename='topology.yml').build()\n\n    try:\n        exp.start()\n        node1 = exp.get_docker('node1')\n        node3 = exp.get_docker('node3')\n        print(node1.cmd(f'ping -c 4 {node3.ip}'))\n\n        input('\\nPress Enter to exit...')\n    except Exception as ex:\n        print(ex)\n    finally:\n        exp.stop()\n</code></pre> <p>To run that experiment use the command: <pre><code>fogbed run experiment.py\n</code></pre></p>"},{"location":"containers/","title":"Containers","text":""},{"location":"containers/#container-params","title":"Container Params","text":"<p><code>fogbed.Container</code> (     name: str,      ip: Optional[str] = None,      dcmd: str = '/bin/bash',      dimage: str = 'ubuntu:trusty',      environment: Dict[str, Any] = {},      port_bindings: Dict[int, int] = {},      volumes: List[str] = [],     resources: HardwareResources = Resources.SMALL,     link_params: Dict[str, Any] = {},     **params: Any ) </p>"},{"location":"containers/#containers-ip","title":"Containers IP","text":"<p>By default containers IP are created using the net <code>10.0.0.x</code>. You can provide custom IPs  setting the <code>ip</code> param for all containers of the emulation. <pre><code>d1 = Container('d1', ip='250.10.0.1')\nd2 = Container('d2', ip='182.1.0.12')\n</code></pre></p>"},{"location":"containers/#environment-variables","title":"Environment Variables","text":"<pre><code>from fogbed import Container\n\nd1 = Container(\n    name='d1', \n    environment={\n        'VAR1': 'value',\n        'VAR2': 10,\n        'VAR3': True\n    }\n)\n</code></pre>"},{"location":"containers/#creating-volumes","title":"Creating Volumes","text":"<pre><code>from fogbed import Container\n\nd1 = Container(\n    name='d1', \n    volumes=['/host/directory:/container/directory']\n)\n</code></pre>"},{"location":"containers/#mapping-ports","title":"Mapping Ports","text":"<p>The format to pass port bindings is opposite to that of the Docker CLI. For example, to open the container port <code>80</code> and map it to the host port <code>3000</code>, you should use: <pre><code>from fogbed import Container\n\nd1 = Container(\n    name='d1', \n    port_bindings={80: 3000}\n)\n</code></pre></p>"},{"location":"containers/#limiting-resources","title":"Limiting Resources","text":"<p>To limit containers CPU and memory set the <code>resources</code> param on constructor: <pre><code>from fogbed import Container, HardwareResources, Resources\n\nd1 = Container('d1', resources=Resources.MEDIUM)\nd2 = Container('d2', resources=HardwareResources(cu=2.0, mu=128))\n</code></pre> See all available Resources.</p> <p>Note</p> <p>To enable the limiting resources feature on containers see  Setting a Resource Model.</p>"},{"location":"containers/#running-commands","title":"Running Commands","text":"<p>After an experiment starts, you can interact with a container through the <code>cmd</code> method. <pre><code>...\n\nkey = '0x63746963616c2062797'\nprint(d1.cmd('ls'))\nd1.cmd(f'echo {key} &gt;&gt; /tmp/data/key.pub')\nprint(d1.cmd('cat /tmp/data/key.pub'))\n\n# Running long background tasks\nd1.cmd('python3 -m http.server 8000 &amp;')\n</code></pre></p>"},{"location":"containers/#building-images","title":"Building Images","text":"<p>To run an container image within Fogbed, first it's necessary to install some packages: <pre><code>FROM ubuntu:focal\n\nRUN apt-get update \\\n    &amp;&amp; apt-get install -y \\\n    net-tools \\\n    iputils-ping \\\n    iproute2 \n</code></pre></p> <p>build it with <code>sudo docker build -t &lt;TAG&gt; .</code> and then pass in a container: <pre><code>from fogbed import Container\n\nd1 = Container(name='d1', dimage='TAG:latest')\n</code></pre> For a complete reference about container requirements visit the Containernet Wiki.</p>"},{"location":"containers/#customizing-links","title":"Customizing links","text":"<p>Sometimes you may want to customize the links to enable fine-grained control over the link characteristics between an instance\u2019s internal switch and its associated containers.</p> <p>This can be done by passing the <code>link_params</code>, where you can define a <code>dict</code> with the link configuration, just like in   Mininet. </p> <pre><code>from fogbed import Container\n\nd1 = Container(\n    name='d1', \n    link_params={\n        'bw': 10, \n        'delay': '5ms', \n        'loss': 10, \n        'max_queue_size': 1000, \n        'use_htb': True\n    }\n)\n</code></pre> <p>Tip</p> <p>To apply the same link configuration to all containers within an instance, you can pass these parameters when creating the link between instances.</p> <pre><code>exp.add_link(cloud, edge, delay='50ms')\n</code></pre>"},{"location":"distributed_emulation/","title":"Distributed Emulation","text":"<p>A topology can be partitioned across different machines using the <code>FogbedDistributedExperiment</code> class. This class enables centralized control of a cluster of remote machines.</p> <p>Unlike the <code>FogbedExperiment</code>, now we need to add the virtual instances within <code>Worker</code> objects. These workers can be connected using tunnels through the Fogbed API to allow the comunication between distributed containers. topology.py<pre><code>from fogbed import (\n    FogbedDistributedExperiment, \n    Container\n)\n\nexp   = FogbedDistributedExperiment()\n\ncloud = exp.add_virtual_instance('cloud')\nfog   = exp.add_virtual_instance('fog')\nedge  = exp.add_virtual_instance('edge')\n\nd1 = Container('d1')\nd2 = Container('d2')\nd3 = Container('d3')\n\nexp.add_docker(d1, cloud)\nexp.add_docker(d2, fog)\nexp.add_docker(d3, edge)\n\nworker1 = exp.add_worker(ip='192.168.0.151', port=5000)\nworker2 = exp.add_worker(ip='192.168.0.152', port=5000)\n\nworker1.add(cloud, reachable=True)\n\nworker2.add(fog, reachable=True)\nworker2.add(edge)\nworker2.add_link(fog, edge, delay='10ms')\n\nexp.add_tunnel(worker1, worker2)\n\ntry:\n    exp.start()\n    print(d1.cmd(f'ping -c 4 {d3.ip}'))\n\nexcept Exception as ex: \n    print(ex)\nfinally:\n    exp.stop()\n</code></pre></p> <p>In this example, 3 virtual instances are distributed among 2 workers. The <code>cloud</code> instance has been added to <code>worker1</code>, while the <code>fog</code> and <code>edge</code> were added to <code>worker2</code>.</p> <p>Note</p> <p>The <code>reachable</code> parameter establishes a connection between the virtual  instance and a switch gateway present in each worker. Through this gateway, the virtual instances can be reached by others.</p> <p>Subsequently, the workers are connected using the <code>add_tunnel</code> method.</p> <p>Tip</p> <p>Make sure the machines are connected and that the IP addresses and ports  are configured according to the experiment script.</p> <p>For the worker <code>ip</code> parameter, you can provide an IP address or hostname, and Fogbed will automatically resolve it.</p> <p>To run that example, start a service in each worker with: <pre><code>fogbed worker -p=5000\n</code></pre> copy and save the code to a file and run it with: <pre><code>fogbed run topology.py\n</code></pre></p>"},{"location":"distributed_emulation/#setting-controller-address","title":"Setting Controller Address","text":"<p>By default, Fogbed runs an OpenFlow Controller on the machine that executes the experiment. You can manually run a controller and pass the address to the experiment. <pre><code>from fogbed import (\n    FogbedDistributedExperiment\n)\n\nexp = FogbedDistributedExperiment(\n    controller_ip='192.168.0.150',\n    controller_port=6633\n)\n</code></pre></p> <p>Tip</p> <p>For the <code>controller_ip</code> parameter, you can provide an IP address or hostname, and Fogbed will automatically resolve it.</p> <p>To start a controller, run the command <code>controller -v ptcp:6633</code> on the target machine. You can also use other controllers, such as the POX Controller.</p>"},{"location":"distributed_emulation/#limiting-cpu-and-memory","title":"Limiting CPU and Memory","text":"<p>To limit CPU and memory within the workers, use the <code>FogbedDistributedExperiment</code> class to set the <code>max_cpu</code> and <code>max_memory</code> parameters based on the number of workers in the topology. <pre><code>from fogbed import FogbedDistributedExperiment\n\nworkers = 3\nexp     = FogbedDistributedExperiment(max_cpu=workers * 0.5, max_memory=workers * 512)\n</code></pre></p> <ul> <li><code>max_cpu</code> - sets the maximum percentage of CPU usage that can be consumed by the emulation.</li> <li><code>max_memory</code> - defines the maximum amount of memory in megabytes that the emulation can utilize.</li> </ul>"},{"location":"distributed_emulation/#helper-methods","title":"Helper methods","text":"<p>The <code>FogbedDistributedExperiment</code> class offers some helper methods like:</p> <p><code>add_docker</code> (container: Container, datacenter: VirtualInstance) <ul> <li>Adds a container to a virtual instance.</li> <li>Raises a <code>ContainerAlreadyExists</code> exception if name or ip already exists. </li> </ul> <p><code>add_tunnel</code> (worker1: Worker, worker2: Worker, **params: Any) <ul> <li>Adds a tunnel between two workers. </li> </ul> <p><code>add_virtual_instance</code> (name: str, resource_model: Optional[ResourceModel] = None) -&gt; VirtualInstance <ul> <li>Creates a virtual instance.</li> <li>Raises a <code>VirtualInstanceAlreadyExists</code> exception if name already exists. </li> </ul> <p><code>add_worker</code> (ip: str, port: int = 5000, controller: Optional[Controller] = None) -&gt; Worker <ul> <li>Creates a worker.</li> <li>Raises a <code>WorkerAlreadyExists</code> exception if ip already exists. </li> </ul> <p><code>get_containers</code> () -&gt; List[Container] <ul> <li>Returns all containers of the emulation. </li> </ul> <p><code>get_docker</code> (name: str) -&gt; Container <ul> <li>Returns a container by name. </li> <li>Raises a <code>ContainerNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>get_virtual_instance</code> (name: str) -&gt; VirtualInstance <ul> <li>Returns a virtual instance by name.</li> <li>Raises a <code>VirtualInstanceNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>get_virtual_instances</code> () -&gt; List[VirtualInstance] <ul> <li>Returns all virtual instances of the emulation. </li> </ul> <p><code>get_worker</code> (ip: str) -&gt; Worker <ul> <li>Returns a worker by ip/hostname.</li> <li>Raises a <code>WorkerNotFound</code> exception if ip/hostname doesn't exist. </li> </ul> <p><code>remove_docker</code> (name: str) <ul> <li>Removes a container by name. </li> <li>Raises a <code>ContainerNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>start</code> () <ul> <li>Starts the experiment.  </li> </ul> <p><code>stop</code> () <ul> <li>Stops the experiment.  </li> </ul>"},{"location":"local_emulation/","title":"Local Emulation","text":"<p>You can create custom topologies and run locally with Containernet using the <code>FogbedExperiment</code> class. topology.py<pre><code>from fogbed import Container, FogbedExperiment\n\nexp   = FogbedExperiment()\ncloud = exp.add_virtual_instance('cloud')\nedge  = exp.add_virtual_instance('edge')\n\nd1 = Container('d1')\nd2 = Container('d2')\nexp.add_docker(container=d1, datacenter=cloud)\nexp.add_docker(container=d2, datacenter=edge)\n\nexp.add_link(cloud, edge, delay='50ms')\n\ntry:\n    exp.start()\n    print(d1.cmd(f'ping -c 4 {d2.ip}'))\n\nexcept Exception as ex:\n    print(ex)\nfinally:\n    exp.stop()\n</code></pre></p>"},{"location":"local_emulation/#limiting-cpu-and-memory","title":"Limiting CPU and Memory","text":"<pre><code>from fogbed import FogbedExperiment\n\nexp = FogbedExperiment(max_cpu=0.5, max_memory=512)\n</code></pre> <ul> <li><code>max_cpu</code> - sets the maximum percentage of CPU usage that can be consumed by the emulation.</li> <li><code>max_memory</code> - defines the maximum amount of memory in megabytes that the emulation can utilize.</li> </ul>"},{"location":"local_emulation/#setting-a-resource-model","title":"Setting a Resource Model","text":"<p>Each <code>VirtualInstance</code> has an optional <code>resource_model</code> param that defines how many resources that instance have. <pre><code>from fogbed import (\n    FogbedExperiment, Container, CloudResourceModel, EdgeResourceModel\n)\n\nexp   = FogbedExperiment()\ncloud = exp.add_virtual_instance('cloud', resource_model=CloudResourceModel(max_cu=8.0, max_mu=1024))\nedge  = exp.add_virtual_instance('edge', resource_model=EdgeResourceModel(max_cu=2.0, max_mu=256))\n</code></pre></p> <ul> <li><code>resource_model</code> - If defined, Fogbed enables the limiting resources feature on containers.</li> </ul>"},{"location":"local_emulation/#adding-or-removing-containers-in-runtime","title":"Adding or removing containers in runtime","text":"<pre><code>from fogbed import Container, FogbedExperiment\n...\n\ntry:\n    exp.start()\n    ...\n\n    exp.add_docker(container=Container('d3'), datacenter=edge)\n    print(exp.get_docker('d3').cmd(f'ping -c 4 {d1.ip}'))\n    exp.remove_docker('d3')\n\nexcept Exception as ex:\n    print(ex)\nfinally:\n    exp.stop()\n</code></pre>"},{"location":"local_emulation/#helper-methods","title":"Helper methods","text":"<p>The <code>FogbedExperiment</code> class offers some helper methods like:</p> <p><code>add_docker</code> (container: Container, datacenter: VirtualInstance) <ul> <li>Adds a container to a virtual instance.</li> <li>Raises a <code>ContainerAlreadyExists</code> exception if name or ip already exists. </li> </ul> <p><code>add_link</code> (node1: VirtualInstance, node2: VirtualInstance, **params: Any) <ul> <li>Adds a link between two virtual instances.  </li> </ul> <p><code>add_virtual_instance</code> (name: str, resource_model: Optional[ResourceModel] = None) -&gt; VirtualInstance <ul> <li>Creates a virtual instance.</li> <li>Raises a <code>VirtualInstanceAlreadyExists</code> exception if name already exists. </li> </ul> <p><code>get_containers</code> () -&gt; List[Container] <ul> <li>Returns all containers of the emulation. </li> </ul> <p><code>get_docker</code> (name: str) -&gt; Container <ul> <li>Returns a container by name. </li> <li>Raises a <code>ContainerNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>get_virtual_instance</code> (name: str) -&gt; VirtualInstance <ul> <li>Returns a virtual instance by name.</li> <li>Raises a <code>VirtualInstanceNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>get_virtual_instances</code> () -&gt; List[VirtualInstance] <ul> <li>Returns all virtual instances of the emulation. </li> </ul> <p><code>remove_docker</code> (name: str) <ul> <li>Removes a container by name. </li> <li>Raises a <code>ContainerNotFound</code> exception if name doesn't exist. </li> </ul> <p><code>start_cli</code> () <ul> <li>Starts the Containernet Command Line Interface. </li> </ul> <p><code>start</code> () <ul> <li>Starts the experiment.  </li> </ul> <p><code>stop</code> () <ul> <li>Stops the experiment.  </li> </ul>"},{"location":"monitoring_metrics/","title":"Monitoring Metrics","text":"<p>To enable the Prometheus monitoring and alerting service to access Fogbed metrics, set <code>metrics_enabled=True</code> in the experiment class:</p> LocalDistributed <pre><code>from fogbed import Container, FogbedExperiment\n\nexp = FogbedExperiment(metrics_enabled=True)\n\n...\n</code></pre> <pre><code>from fogbed import Container, FogbedDistributedExperiment\n\nexp = FogbedDistributedExperiment(metrics_enabled=True)\n\n...\n</code></pre> <p>Fogbed uses Grafana to visualize and CAdvisor to collect data from all running workers. After the experiment starts you can access the Grafana Dashboard through the URL: http://localhost:3000/d/fogbed/docker-monitoring. </p> <p></p> <p>The default username and password are <code>admin</code> and <code>admin123</code>.</p>"},{"location":"quickstart/","title":"QuickStart","text":"<p>After having installed fogbed you can start an example topology. Copy the example below and save to a file:</p> <p>topology.py<pre><code>from fogbed import (\n    FogbedExperiment, Container, setLogLevel\n)\n\nsetLogLevel('info')\n\nexp = FogbedExperiment()\n\ncloud = exp.add_virtual_instance('cloud')\nfog   = exp.add_virtual_instance('fog')\nedge  = exp.add_virtual_instance('edge')\n\nd1 = Container('d1', ip='10.0.0.1', dimage='ubuntu:trusty')\nd2 = Container('d2', ip='10.0.0.2', dimage='ubuntu:trusty')\nd3 = Container('d3', ip='10.0.0.3', dimage='ubuntu:trusty')\n\nexp.add_docker(d1, cloud)\nexp.add_docker(d2, fog)\nexp.add_docker(d3, edge)\n\nexp.add_link(cloud, fog)\nexp.add_link(fog, edge)\n\ntry:\n    exp.start()\n\n    print(d1.cmd('ifconfig'))\n    print(d1.cmd(f'ping -c 4 {d3.ip}'))\n\nexcept Exception as ex: \n    print(ex)\nfinally:\n    exp.stop()\n</code></pre> and then run it with: <pre><code>fogbed run topology.py\n</code></pre></p> <p>Here we have the instantiation of a fog topology followed by the definition of 3 Virtual Instances. A <code>VirtualInstance</code> in the context of fogbed is a unit that can have one or more containers linked together by a single switch.</p> <p>In this example we are checking the command <code>ifconfig</code> inside the host <code>d1</code> that is inside the Virtual Instance <code>cloud</code>, and running the ping command to test the reachability between <code>d1</code> and <code>d3</code>.</p> <pre><code>&gt;&gt;&gt; print(d1.cmd(f'ping -c 4 {d3.ip}'))\n'''\nPING 10.0.0.3 (10.0.0.3) 56(84) bytes of data.\n64 bytes from 10.0.0.3: icmp_seq=1 ttl=64 time=16.1 ms\n64 bytes from 10.0.0.3: icmp_seq=2 ttl=64 time=0.414 ms\n64 bytes from 10.0.0.3: icmp_seq=3 ttl=64 time=0.050 ms\n64 bytes from 10.0.0.3: icmp_seq=4 ttl=64 time=0.074 ms\n\n--- 10.0.0.3 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3051ms\nrtt min/avg/max/mdev = 0.050/4.161/16.108/6.899 ms\n'''\n</code></pre>"},{"location":"resource_models/","title":"Resource Models","text":"<p>The Resource Models define the policy for allocating computational resources such as <code>cpu_quota</code> and <code>mem_limit</code> within containers.</p> <p>Each resource model has <code>max_cu</code> and <code>max_mu</code> values, representing the maximum computing and memory units that the <code>VirtualInstance</code> can have.</p> <p>There are three types of resource models in Fogbed: <code>EdgeResourceModel</code>, <code>FogResourceModel</code> and <code>CloudResourceModel</code>.</p>"},{"location":"resource_models/#edgeresourcemodel","title":"EdgeResourceModel","text":"<p>The Edge resource model follows a fixed limit strategy. If a container requests resources, and all of them have already been allocated, an exception is raised to alert that no more resources can be allocated for new containers. <pre><code>from fogbed import (\n    FogbedExperiment, Container, Resources, EdgeResourceModel\n)\nexp  = FogbedExperiment()\n\nedge_model = EdgeResourceModel(max_cu=2, max_mu=256)\nedge = exp.add_virtual_instance('edge',  edge_model)\n\nexp.add_docker(Container('d1', resources=Resources.SMALL), datacenter=edge)\nexp.add_docker(Container('d2', resources=Resources.SMALL), datacenter=edge)\nexp.add_docker(Container('d3', resources=Resources.SMALL), datacenter=edge)\n</code></pre></p> <pre><code>d3: Allocation of container was blocked by resource model.\n</code></pre>"},{"location":"resource_models/#cloudresourcemodel-and-fogresourcemodel","title":"CloudResourceModel and FogResourceModel","text":"<p>The Fog and Cloud resource models are identical, employing an over-provisioning strategy. If a container requests <code>HardwareResources</code>, and all of the resources of the <code>VirtualInstance</code> have already been allocated to other containers, the new container starts regardless. Subsequently, the CPU time and memory limit for each container is recalculated. <pre><code>from fogbed import (\n    FogbedExperiment, Container, Resources, CloudResourceModel\n)\nexp  = FogbedExperiment()\n\ncloud_model = CloudResourceModel(max_cu=2, max_mu=256)\ncloud = exp.add_virtual_instance('cloud',  cloud_model)\n\nexp.add_docker(Container('d1', resources=Resources.TINY),   datacenter=cloud)\nexp.add_docker(Container('d2', resources=Resources.SMALL),  datacenter=cloud)\nexp.add_docker(Container('d3', resources=Resources.SMALL),  datacenter=cloud)\nexp.add_docker(Container('d4', resources=Resources.MEDIUM), datacenter=cloud)\n\nprint(cloud)\n</code></pre></p> <pre><code>[cloud]\nContainer(name=d1, cpu_quota=76923,  cpu_period=1000000)\nContainer(name=d2, cpu_quota=153846, cpu_period=1000000)\nContainer(name=d3, cpu_quota=153846, cpu_period=1000000)\nContainer(name=d4, cpu_quota=615384, cpu_period=1000000)\n</code></pre>"},{"location":"resource_models/#predefined-resources","title":"Predefined Resources","text":"<p>Below is the list of the predefined <code>HardwareResources</code>: <pre><code>from fogbed import Resources\n\n&gt;&gt;&gt; Resources.TINY\n'HardwareResources(cu=0.5,  mu=32)'\n\n&gt;&gt;&gt; Resources.SMALL\n'HardwareResources(cu=1.0,  mu=128)'\n\n&gt;&gt;&gt; Resources.MEDIUM\n'HardwareResources(cu=4.0,  mu=256)'\n\n&gt;&gt;&gt; Resources.LARGE\n'HardwareResources(cu=8.0,  mu=512)'\n\n&gt;&gt;&gt; Resources.XLARGE\n'HardwareResources(cu=16.0, mu=1024)'\n</code></pre></p>"}]}